// This file is auto generated by the protocol-buffers compiler

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
var encodings = require('protocol-buffers-encodings')
var varint = encodings.varint
var skip = encodings.skip

var File = exports.File = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Hello = exports.Hello = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Request = exports.Request = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Unrequest = exports.Unrequest = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Queued = exports.Queued = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Refuse = exports.Refuse = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Data = exports.Data = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Ack = exports.Ack = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

defineFile()
defineHello()
defineRequest()
defineUnrequest()
defineQueued()
defineRefuse()
defineData()
defineAck()

function defineFile () {
  File.encodingLength = encodingLength
  File.encode = encode
  File.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.sha256)) {
      var len = encodings.bytes.encodingLength(obj.sha256)
      length += 1 + len
    }
    if (defined(obj.offset)) {
      var len = encodings.varint.encodingLength(obj.offset)
      length += 1 + len
    }
    if (defined(obj.length)) {
      var len = encodings.varint.encodingLength(obj.length)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.sha256)) {
      buf[offset++] = 10
      encodings.bytes.encode(obj.sha256, buf, offset)
      offset += encodings.bytes.encode.bytes
    }
    if (defined(obj.offset)) {
      buf[offset++] = 16
      encodings.varint.encode(obj.offset, buf, offset)
      offset += encodings.varint.encode.bytes
    }
    if (defined(obj.length)) {
      buf[offset++] = 24
      encodings.varint.encode(obj.length, buf, offset)
      offset += encodings.varint.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      sha256: null,
      offset: 0,
      length: 0
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.sha256 = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        break
        case 2:
        obj.offset = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        break
        case 3:
        obj.length = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineHello () {
  Hello.encodingLength = encodingLength
  Hello.encode = encode
  Hello.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.feed)) throw new Error("feed is required")
    var len = encodings.bytes.encodingLength(obj.feed)
    length += 1 + len
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.feed)) throw new Error("feed is required")
    buf[offset++] = 10
    encodings.bytes.encode(obj.feed, buf, offset)
    offset += encodings.bytes.encode.bytes
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      feed: null
    }
    var found0 = false
    while (true) {
      if (end <= offset) {
        if (!found0) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.feed = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        found0 = true
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineRequest () {
  Request.encodingLength = encodingLength
  Request.encode = encode
  Request.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.file)) throw new Error("file is required")
    var len = File.encodingLength(obj.file)
    length += varint.encodingLength(len)
    length += 1 + len
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.file)) throw new Error("file is required")
    buf[offset++] = 10
    varint.encode(File.encodingLength(obj.file), buf, offset)
    offset += varint.encode.bytes
    File.encode(obj.file, buf, offset)
    offset += File.encode.bytes
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      file: null
    }
    var found0 = false
    while (true) {
      if (end <= offset) {
        if (!found0) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.file = File.decode(buf, offset, offset + len)
        offset += File.decode.bytes
        found0 = true
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineUnrequest () {
  Unrequest.encodingLength = encodingLength
  Unrequest.encode = encode
  Unrequest.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.file)) throw new Error("file is required")
    var len = File.encodingLength(obj.file)
    length += varint.encodingLength(len)
    length += 1 + len
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.file)) throw new Error("file is required")
    buf[offset++] = 10
    varint.encode(File.encodingLength(obj.file), buf, offset)
    offset += varint.encode.bytes
    File.encode(obj.file, buf, offset)
    offset += File.encode.bytes
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      file: null
    }
    var found0 = false
    while (true) {
      if (end <= offset) {
        if (!found0) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.file = File.decode(buf, offset, offset + len)
        offset += File.decode.bytes
        found0 = true
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineQueued () {
  Queued.encodingLength = encodingLength
  Queued.encode = encode
  Queued.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.queuePosition)) throw new Error("queuePosition is required")
    var len = encodings.varint.encodingLength(obj.queuePosition)
    length += 1 + len
    if (defined(obj.queueBytes)) {
      var len = encodings.varint.encodingLength(obj.queueBytes)
      length += 1 + len
    }
    if (defined(obj.queueFiles)) {
      var len = encodings.varint.encodingLength(obj.queueFiles)
      length += 1 + len
    }
    if (!defined(obj.file)) throw new Error("file is required")
    var len = File.encodingLength(obj.file)
    length += varint.encodingLength(len)
    length += 1 + len
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.queuePosition)) throw new Error("queuePosition is required")
    buf[offset++] = 8
    encodings.varint.encode(obj.queuePosition, buf, offset)
    offset += encodings.varint.encode.bytes
    if (defined(obj.queueBytes)) {
      buf[offset++] = 16
      encodings.varint.encode(obj.queueBytes, buf, offset)
      offset += encodings.varint.encode.bytes
    }
    if (defined(obj.queueFiles)) {
      buf[offset++] = 24
      encodings.varint.encode(obj.queueFiles, buf, offset)
      offset += encodings.varint.encode.bytes
    }
    if (!defined(obj.file)) throw new Error("file is required")
    buf[offset++] = 34
    varint.encode(File.encodingLength(obj.file), buf, offset)
    offset += varint.encode.bytes
    File.encode(obj.file, buf, offset)
    offset += File.encode.bytes
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      queuePosition: 0,
      queueBytes: 0,
      queueFiles: 0,
      file: null
    }
    var found0 = false
    var found3 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found3) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.queuePosition = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        found0 = true
        break
        case 2:
        obj.queueBytes = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        break
        case 3:
        obj.queueFiles = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        break
        case 4:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.file = File.decode(buf, offset, offset + len)
        offset += File.decode.bytes
        found3 = true
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineRefuse () {
  Refuse.encodingLength = encodingLength
  Refuse.encode = encode
  Refuse.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.file)) throw new Error("file is required")
    var len = File.encodingLength(obj.file)
    length += varint.encodingLength(len)
    length += 1 + len
    if (defined(obj.reason)) {
      var len = encodings.varint.encodingLength(obj.reason)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.file)) throw new Error("file is required")
    buf[offset++] = 10
    varint.encode(File.encodingLength(obj.file), buf, offset)
    offset += varint.encode.bytes
    File.encode(obj.file, buf, offset)
    offset += File.encode.bytes
    if (defined(obj.reason)) {
      buf[offset++] = 16
      encodings.varint.encode(obj.reason, buf, offset)
      offset += encodings.varint.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      file: null,
      reason: 0
    }
    var found0 = false
    while (true) {
      if (end <= offset) {
        if (!found0) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.file = File.decode(buf, offset, offset + len)
        offset += File.decode.bytes
        found0 = true
        break
        case 2:
        obj.reason = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineData () {
  Data.encodingLength = encodingLength
  Data.encode = encode
  Data.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.sha256)) {
      var len = encodings.bytes.encodingLength(obj.sha256)
      length += 1 + len
    }
    if (!defined(obj.offset)) throw new Error("offset is required")
    var len = encodings.varint.encodingLength(obj.offset)
    length += 1 + len
    if (!defined(obj.data)) throw new Error("data is required")
    var len = encodings.bytes.encodingLength(obj.data)
    length += 1 + len
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.sha256)) {
      buf[offset++] = 10
      encodings.bytes.encode(obj.sha256, buf, offset)
      offset += encodings.bytes.encode.bytes
    }
    if (!defined(obj.offset)) throw new Error("offset is required")
    buf[offset++] = 16
    encodings.varint.encode(obj.offset, buf, offset)
    offset += encodings.varint.encode.bytes
    if (!defined(obj.data)) throw new Error("data is required")
    buf[offset++] = 26
    encodings.bytes.encode(obj.data, buf, offset)
    offset += encodings.bytes.encode.bytes
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      sha256: null,
      offset: 0,
      data: null
    }
    var found1 = false
    var found2 = false
    while (true) {
      if (end <= offset) {
        if (!found1 || !found2) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.sha256 = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        break
        case 2:
        obj.offset = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        found1 = true
        break
        case 3:
        obj.data = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        found2 = true
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineAck () {
  Ack.encodingLength = encodingLength
  Ack.encode = encode
  Ack.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.file)) throw new Error("file is required")
    var len = File.encodingLength(obj.file)
    length += varint.encodingLength(len)
    length += 1 + len
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.file)) throw new Error("file is required")
    buf[offset++] = 10
    varint.encode(File.encodingLength(obj.file), buf, offset)
    offset += varint.encode.bytes
    File.encode(obj.file, buf, offset)
    offset += File.encode.bytes
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      file: null
    }
    var found0 = false
    while (true) {
      if (end <= offset) {
        if (!found0) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.file = File.decode(buf, offset, offset + len)
        offset += File.decode.bytes
        found0 = true
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
